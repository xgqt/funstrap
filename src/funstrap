#!/usr/bin/env bash


set -e
export PATH


base_url="https://build.funtoo.org"

# Defaults

os_directory="."

os_release="1.3-release-std"
os_arch="x86-64bit"
os_subarch="generic_64"

do_download="yes"
do_check="yes"
do_unpack="yes"


usage() {
    cat <<HELP

funstrap - funtoo base system bootstrap
based on debootstrap

usage: funstrap

Options:
    -h              display this help page
    -d              choose directory
    -r              choose release
    -a              choose architecture
    -s              choose sub-architecture
    --no-download   use a downloaded stage tarball
    --no-check      don't checksum the tarball
    --no-unpack     don't unpack the tarball

Defaults:
    directory   =   current directory
    release     =   1.3-release-std
    arch        =   x86-64bit
    sub-arch    =   generic_64

Avalible values:
    release:
        1.2-release-ec2
        1.3-release-ec2
        1.3-release-std
        1.4-release-std

    arch:
        arm-32bit
        arm-64bit
        pure64
        riscv-64bit
        x86-32bit
        x86-64bit

    sub arch:
        arm-32bit:
            armv6j_hardfp
            armv6j_vfp_hardfp
            armv7a_vfpv3_hardfp
            odroid-xu4
            raspi
            raspi2
            raspi3
        arm-64bit:
            arm64_generic
        pure64:
            amd64-zen-pure64
            intel64-broadwell-pure64
            intel64-haswell-pure64
            intel64-ivybridge-pure64
            intel64-nehalem-pure64
            intel64-silvermont-pure64
            intel64-skylake-pure64
            intel64-westmere-pure64
        riscv-64bit:
            sifive-fu540
        x86-32bit:
            atom_32
            generic_32
            i686
            pentium4
        x86-64bit:
            amd64-bulldozer
            amd64-excavator
            amd64-k10
            amd64-piledriver
            amd64-steamroller
            amd64-zen
            core2_64
            generic_64
            intel64-broadwell
            intel64-haswell
            intel64-ivybridge
            intel64-nehalem
            intel64-sandybridge
            intel64-silvermont
            intel64-skylake
            intel64-westmere

HELP
}

bold_msg() {
    echo "$(tput bold)$1$(tput sgr0)"
}

err_msg() {
    echo "$(tput bold)$1$(tput sgr0)"
    exit 1
}

get_stage() {
    wget $base_url/$os_release/$os_arch/$os_subarch/stage3-latest.tar.xz -O $os_directory/stage3-latest.tar.xz
}

check_stage() {
    wget $base_url/$os_release/$os_arch/$os_subarch/stage3-latest.tar.xz.hash.txt -O $os_directory/stage3-latest.tar.xz.hash.txt
    tarball_checksum=$(sha256sum $os_directory/stage3-latest.tar.xz | cut -d ' ' -f1)
    grep $tarball_checksum $os_directory/stage3-latest.tar.xz.hash.txt || err_msg "Checksum failed"
}

unpack_stage() {
    tar xpf $os_directory/stage3-latest.tar.xz -C $os_directory
}


# Command line options

while [ -n "$1" ]; do
    case "$1" in
    -h | --help)
        usage
        exit 0
        ;;
    -d | --directory)
        os_directory="$2"
        ;;
    -r | --release)
        os_release="$2"
        ;;
    -a | --arch)
        os_arch="$2"
        ;;
    -s | --sub_arch)
        os_subarch="$2"
        ;;
    --no-download)
        do_download="no"
        ;;
    --no-unpack)
        do_unpack="no"
        ;;
    --no-check)
        do_check="no"
        ;;
    -*)
        usage
        exit 1
        ;;
    esac
    shift
done


# Check root

((EUID == 0)) || (
    err_msg "This script must be run with root privileges!"
)


# Do some work

if [ $do_download = "yes" ]; then
    bold_msg "Downloading for $os_arch-$os_subarch into $os_directory ..."
    get_stage
    bold_msg "Stage downloaded, OK"
fi

if [ $do_check = "yes" ]; then
    bold_msg "Checking sha256 sum ..."
    check_stage
    bold_msg "Stage checked, OK"
fi

if [ $do_unpack = "yes" ]; then
    bold_msg "Unpacking stage tarball ..."
    unpack_stage
    bold_msg "Stage unpacked, OK"
fi
